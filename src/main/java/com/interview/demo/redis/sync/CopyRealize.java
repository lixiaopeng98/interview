package com.interview.demo.redis.sync;

/**
 * @describe: 复制 实现
 * @author: lxp
 * @date: 2021/1/4 16:06
 */
public class CopyRealize {

    /**
     * 大概分为六步
     * Redis设计与实现 P211      15.6 复制的实现
     * 1. 设置服务器的地址和端口
     *      SLAVEOF 127.0.0.1 6379
     * 2. 建立套接字连接
     *      从 主动创建套接字连接 链向 主
     *      如果连接成功 从 会为这个套接字关联一个专门用于处理复制工作的文件处理器
     *      主服务器 接受 从服务器的套接字连接之后 会为该套接字创建相应的客户端状态
     *
     *      从服务器是主服务器的客户端
     * 3. 发送PING命令
     *      作用 1. 检查套接字的读写状态是否正常  2. 检查主服务器谁能否正常处理命令请求
     *      从服务器 向 主服务器 发送 ping命令
     *              主服务器回应 1. 超时回应 从服务器会 断开链接重新建立套接字连接
     *                         2. 错误回应  从服务器会 断开链接重新建立套接字连接
     *                         3. 回复pong 表示网络链接正常 继续执行复制的工作
     * 4. 身份认证
     *      如果从服务器 设置了 masterauth 那么进行身份验证 否则就不进行身份验证
     *      从服务器 向 主服务器 发送一条 auth 命令， 参数为 从服务器 masterauth 选项的值：
     *           auth 10086
     *           可能遇到的情况：
     *           1. 主服务器 没有设置requirepass 从服务器也没有设置 masterauth 那么复制工作继续进行
     *           2. 如果从服务器 发送的密码和主服务器 requirepass 密码相同，可以继续复制，如不同 返回错误
     *           3. 主服务器设置了requirepass 但从服务器没有设置 masterauth 主会返回 noauth 错误
     *              如果主服务器没有设置，从服务器设置了masterauth 主服务器会返回 no password is set错误
     *           所有错误 都会造成复制工作 终止
     * 5. 发送端口信息
     *       REPLCONF listening-port <port-number>
     * 6. 开始同步
     *       从服务器 是 主服务器的 客户端
     *       主服务器 也是 从服务器的 客户端 用于同步 主服务器 缓冲区的数据
     * 7. 命令传播
     *       完成同步之后，主从服务器就会进入命令传播阶段，主服务器会 将自己执行的写命令 发送给 从服务器 同步数据
     * 8. 心跳检查
     *       命令传播阶段 从会默认每秒 向主服务器询问
     *       REPLCONF ACK <replication_offset>  replication_offset 是从服务器当前的复制偏移量
     *       1. 检查主从服务器的网络链接状态
     *       2. 辅助实现 min-slaves 配置选项
     *       3. 检测命令丢失
     *
     */

}
